# you REALLY wante everything that's not `True` or `False` to be lower cased in this file. 
# We aren't able to check for case in the actual execution of this file because of the need for booleans in python to be capitalized

[CONTROL]
# either regression, or classification
# When setting to classification, examples will be organized by 
# valence/arousal quartiles and the corresponding mood will be be the prediction target.
experiment_type = regression
valence_key = valence
arousal_key = arousal


[PREPROCESSING]
threshold = 300
test_size = 0.20
# case sensitive
meta_cols = query_index,score,submission.score,n_words,n_comments


[FEATURE_SELECTION] 
selector = none
# n_components is the parameter passed to the PCA constructor. 
# This value represents total number of components if 1 <= n < inf
# If 0 < n < 1, then n_components represents the percent of explained variance 
# the PCA will preserve, and find the minimum number of components which fit that criteria. 
n_components = 0.95
# percent_features is only used with selection strategies which aren't PCA.
percent_features = 0.90

[MODEL]
; model = MLPregressor
model = randomforestregressor

# Only use when experiment_type = classification
[SAMPLER]
# Valid samplers include under_sample and SMOTE.
sampling = none


# This section should be specific to the type of model you chose above.
[MODEL_ARGS]

# This section is only used if grid_search = True
# Every parameter should either be in the form of a comma separated list, or 
# param_low, param_high, param_step. 
[GS_PARAMS]
grid_search = true
cv = 5
# See - https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter 
scoring = neg_mean_absolute_error

# This section should be specific to the type of model you chose above.
[PARAM_GRID]
; params = "[{'model__n_estimators': [100, 150, 200],
;             'model__bootstrap': [True, False],
;             'model__criterion': ['squared_error', 'poisson'],
;             'model__max_features': ['auto', 'sqrt', 0.3],
;             'model__min_samples_leaf': [1, 2, 4],
;             'model__min_samples_split': [2, 5, 10],
;             'model__max_depth': [10, 20, 30, 40, 50, 75, 100],
;             'model__ccp_alpha': [0.0, 0.01, 0.02, 0.03]}]"


params = "[{'model__n_estimators': [100],
            'model__bootstrap': [True, False],
            'model__criterion': ['squared_error'],
            'model__max_features': ['auto'],
            'model__min_samples_leaf': [2],
            'model__min_samples_split': [5],
            'model__max_depth': [30],
            'model__ccp_alpha': [0.0]}]"

; test with a max depth of none?

